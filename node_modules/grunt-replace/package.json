{
  "name": "grunt-replace",
  "description": "Replace text patterns with a given replacement.",
  "version": "0.6.2",
  "homepage": "http://github.com/outaTiME/grunt-replace",
  "author": {
    "name": "outaTiME",
    "url": "http://outa.im/"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/outaTiME/grunt-replace.git"
  },
  "bugs": {
    "url": "http://github.com/outaTiME/grunt-replace/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/outaTiME/grunt-replace/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "chalk": "~0.4.0",
    "lodash": "~2.4.1"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-nodeunit": "~0.3.0",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-internal": "~0.4.6",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "replace",
    "replacement",
    "pattern",
    "patterns",
    "match",
    "text",
    "string",
    "regex",
    "regexp",
    "json",
    "flatten"
  ],
  "files": [
    "tasks",
    "LICENSE-MIT"
  ],
  "readme": "# grunt-replace [![Build Status](https://secure.travis-ci.org/outaTiME/grunt-replace.png?branch=master)](http://travis-ci.org/outaTiME/grunt-replace)\n\n> Replace text patterns with a given replacement.\n\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-replace --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-replace');\n```\n\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.2](https://github.com/outaTiME/grunt-replace/tree/grunt-0.3-stable).*\n\n\n\n## Replace Task\n_Run this task with the `grunt replace` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n### Options\n\n#### patterns\nType: `Array`\n\nDefine patterns that will be used to replace the contents of source files.\n\nThe matches will be sorted to prevent replacement issues like `head` / `header` (typo regexps will be resolved at last).\n\n#### patterns.match\nType: `String|RegExp`\n\nIndicates the matching expression.\n\nIf matching type is `String` and `expression` attribute is `false` we use a simple variable lookup mechanism `@@string` (in any other case we use the default regexp replace logic):\n\n```javascript\noptions: {\n  patterns: [\n    {\n      match: 'foo',\n      replacement: 'bar', // replaces \"@@foo\" to \"bar\"\n      expression: false   // simple variable lookup\n    }\n  ]\n}\n```\n\nTemplated regexps are allowed, `match` attribure must be quoted and `expression` attribute should be in `true`:\n\n```javascript\noptions: {\n  patterns: [\n    {\n      match: '/<%= grunt.template.date(847602000000, \"yyyy\") %>/g',\n      replacement: '2014', // replaces \"1996\" to \"2014\"\n      expression: true     // must be forced for templated regexp\n    }\n  ]\n}\n```\n\n#### patterns.replacement\nType: `String|Function|Object`\n\nIndicates the replacement for match, for more information about replacement check out the [String.replace].\n\nYou can specify a function as replacement. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string.\n\n```javascript\noptions: {\n  patterns: [\n    {\n      match: /foo/g,\n      replacement: function () {\n        return 'bar'; // replaces \"foo\" to \"bar\"\n      }\n    }\n  ]\n}\n```\n\nThe arguments to the function are the same as [String.replace] but we expose `source` and `target` for better processing:\n\n```javascript\noptions: {\n  patterns: [\n    {\n      match: '__SOURCE_FILE__',\n      replacement: function (match, offset, string, source, target) {\n        return source;\n      }\n    }\n  ]\n}\n```\n\n> The previous code is already provided and was used for demonstration purposes only, check out the [Built-in Replacements](#built-in-replacements) for more information.\n\nAlso supports object as replacement (we create string representation of object using [JSON.stringify]):\n\n```javascript\noptions: {\n  patterns: [\n    {\n      match: /foo/g,\n      replacement: [1, 2, 3] // replaces \"foo\" with string representation of \"array\" object\n    }\n  ]\n}\n```\n\n[String.replace]: http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n[JSON.stringify]: http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n\n#### patterns.json\nType: `Object`\n\nIf an attribute `json` found in pattern definition we flatten the object using `delimiter` concatenation and each keyâ€“value pair will be used for the replacement (simple variable lookup mechanism and no regexp support).\n\n```javascript\noptions: {\n  patterns: [\n    {\n      json: {\n        \"key\": \"value\" // replaces \"@@key\" to \"value\"\n      }\n    }\n  ]\n}\n```\n\nAlso supports nested objects and templating:\n\n```javascript\noptions: {\n  patterns: [\n    {\n      json: {\n        \"key\": \"value\",   // replaces \"@@key\" to \"value\"\n        \"inner\": {        // replaces \"@@inner\" with string representation of \"inner\" object\n          \"key\": \"value\"  // replaces \"@@inner.key\" to \"value\"\n        }\n      }\n    }\n  ]\n}\n```\n\nAlternatively, you can specify a external file:\n\n```javascript\noptions: {\n  patterns: [\n    {\n      json: grunt.file.readJSON('config.json')\n    }\n  ]\n}\n```\n\n#### patterns.expression\nType: `Boolean`\nDefault: `false`\n\nIndicates the type of matching (for templated regexp match we need to force in `true`).\n\nIf detects regexp instance in `match` attribute we assume to works with expression matcher (in any other case should be forced).\n\n#### variables\nType: `Object`\n\nThis is the old way to define patterns using plain object (simple variable lookup mechanism and no regexp support), you can still using but for more control you should use the new `patterns` way.\n\n```javascript\noptions: {\n  variables: {\n    'key': 'value' // replaces \"@@key\" to \"value\"\n  }\n}\n```\n\n#### prefix\nType: `String`\nDefault: `@@`\n\nThe prefix added to `patterns.match` for easy matching and replace error prevention.\n\n> This only applies for simple variable lookup mechanism.\n\n#### usePrefix\nType: `Boolean`\nDefault: `true`\n\nIf set to `false`, we match the string in `patterns.match` without `prefix` concatenation. It was useful when you want to look up an simple string.\n\n> This only applies for simple variable lookup mechanism.\n\n#### preservePrefix\nType: `Boolean`\nDefault: `false`\n\nIf set to `true`, we preserve the `prefix` in target.\n\n> This only applies for simple variable lookup mechanism and `patterns.replacement` is an string.\n\n#### force\nType: `Boolean`\nDefault: `false`\n\nForce the copy of files even when those files don't have any match found for replacement.\n\n#### noProcess\nType: `String`\n\nThis option is an advanced way to control which file contents are processed.\n\n> `processContentExclude` has been renamed to `noProcess` and the option name will be removed in the future.\n\n#### encoding\nType: `String`\nDefault: `grunt.file.defaultEncoding`\n\nThe file encoding to copy files with.\n\n#### mode\nType: `Boolean` or `Number`\nDefault: `false`\n\nWhether to copy or set the existing file permissions. Set to `true` to copy the existing file permissions. Or set to the mode, i.e.: `0644`, that copied files will be set to.\n\n#### delimiter\nType: `String`\nDefault: `.`\n\nThe delimiter used to flatten when using object as replacement.\n\n### Built-in Replacements\n\nFew matching rules are provided by default and can be used anytime (these will be affected by the `options` given):\n\n *  `__SOURCE_FILE__`:\n\n    Replace match with the source file.\n\n *  `__SOURCE_PATH__`:\n\n    Replace match with the path of source file.\n\n *  `__SOURCE_FILENAME__`:\n\n    Replace match with the filename of source file.\n\n *  `__TARGET_FILE__`:\n\n    Replace match with the target file.\n\n *  `__TARGET_PATH__`:\n\n    Replace match with the path of target file.\n\n *  `__TARGET_FILENAME__`:\n\n    Replace match with the filename of target file.\n\n> If you are looking how to use an `built-in` replacements, check out the [How to insert filename in target](#how-to-insert-filename-in-target) usage.\n\n### Usage Examples\n\n#### Basic\n\nFile `src/manifest.appcache`:\n\n```\nCACHE MANIFEST\n# @@timestamp\n\nCACHE:\n\nfavicon.ico\nindex.html\n\nNETWORK:\n*\n```\n\nGruntfile, define pattern (for timestamp) and the source files for lookup:\n\n```js\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: 'timestamp',\n          replacement: '<%= grunt.template.today() %>'\n        }\n      ]\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/manifest.appcache'], dest: 'build/'}\n    ]\n  }\n}\n```\n\n#### Multiple matching\n\nFile `src/manifest.appcache`:\n\n```\nCACHE MANIFEST\n# @@timestamp\n\nCACHE:\n\nfavicon.ico\nindex.html\n\nNETWORK:\n*\n```\n\n\nFile `src/humans.txt`:\n\n```\n              __     _\n   _    _/__  /./|,//_`\n  /_//_// /_|///  //_, outaTiME v.@@version\n\n/* TEAM */\n  Web Developer / Graphic Designer: Ariel Oscar Falduto\n  Site: http://www.outa.im\n  Twitter: @outa7iME\n  Contact: afalduto at gmail dot com\n  From: Buenos Aires, Argentina\n\n/* SITE */\n  Last update: @@timestamp\n  Standards: HTML5, CSS3, robotstxt.org, humanstxt.org\n  Components: H5BP, Modernizr, jQuery, Twitter Bootstrap, LESS, Jade, Grunt\n  Software: Sublime Text 2, Photoshop, LiveReload\n\n```\n\nGruntfile:\n\n```js\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: 'version',\n          replacement: '<%= pkg.version %>'\n        },\n        {\n          match: 'timestamp',\n          replacement: '<%= grunt.template.today() %>'\n        }\n      ]\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/manifest.appcache', 'src/humans.txt'], dest: 'build/'}\n    ]\n  }\n}\n```\n\n#### Cache busting\n\nFile `src/assets/index.html`:\n\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"/css/style.css?rel=@@timestamp\">\n  <script src=\"/js/app.js?rel=@@timestamp\"></script>\n</head>\n```\n\nGruntfile:\n\n```js\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: 'timestamp',\n          replacement: '<%= new Date().getTime() %>'\n        }\n      ]\n    },\n    files: [\n      {src: ['src/assets/index.html'], dest: 'build/index.html'}\n    ]\n  }\n}\n```\n\n#### Include file\n\nFile `src/index.html`:\n\n```html\n<body>\n  @@include\n</body>\n```\n\nGruntfile:\n\n```js\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: 'include',\n          replacement: '<%= grunt.file.read(\"includes/content.html\") %>'\n        }\n      ]\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/index.html'], dest: 'build/'}\n    ]\n  }\n}\n```\n\n#### Regular expression\n\nFile `src/username.txt`:\n\n```\nJohn Smith\n```\n\nGruntfile:\n\n```js\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: /(\\w+)\\s(\\w+)/,\n          replacement: '$2, $1', // replaces \"John Smith\" to \"Smith, John\"\n          expression: true\n        }\n      ]\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/username.txt'], dest: 'build/'}\n    ]\n  }\n}\n```\n\n#### Lookup for `foo` instead of `@@foo`\n\nThe `String` matching type or `expression` in `false` generates a simple variable lookup mechanism `@@string`, to skip this mode use one of the below rules ... make your choice:\n\nGruntfile:\n\n```js\n// option 1 (explicitly using an regexp)\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: /foo/g,\n          replacement: 'bar'\n        }\n      ]\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/foo.txt'], dest: 'build/'}\n    ]\n  }\n}\n\n// option 2 (easy way)\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: 'foo',\n          replacement: 'bar'\n        }\n      ],\n      usePrefix: false\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/foo.txt'], dest: 'build/'}\n    ]\n  }\n}\n\n// option 3 (old way)\nreplace: {\n  dist: {\n    options: {\n      patterns: [\n        {\n          match: 'foo',\n          replacement: 'bar'\n        }\n      ],\n      prefix: '' // remove prefix\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/foo.txt'], dest: 'build/'}\n    ]\n  }\n}\n```\n\n#### How to insert filename in target\n\nFile `src/app.js`:\n\n```js\n// filename: @@__SOURCE_FILENAME__\n\nvar App = App || (function () {\n\n  return {\n\n    // app contents\n\n  };\n\n}());\n\nwindow.App = App;\n```\n\nGruntfile:\n\n```js\nreplace: {\n  dist: {\n    options: {\n      // pass, we use built-in replacements\n    },\n    files: [\n      {expand: true, flatten: true, src: ['src/**/*.js'], dest: 'build/'}\n    ]\n  }\n}\n```\n\n## Release History\n\n * 2014-02-13â€ƒâ€ƒâ€ƒv0.6.2â€ƒâ€ƒâ€ƒAttach process data for function replacements (source / target). Add delimiter option for object as replacement. Dependencies updated.\n * 2014-02-06â€ƒâ€ƒâ€ƒv0.6.1â€ƒâ€ƒâ€ƒRename excludePrefix to preservePrefix (more readable) and adds usePrefix flag. Support the noProcess option like [grunt-contrib-copy](https://github.com/gruntjs/grunt-contrib-copy).\n * 2014-02-05â€ƒâ€ƒâ€ƒv0.6.0â€ƒâ€ƒâ€ƒObject replacement allowed. New excludePrefix flag (thanks [@shinnn](https://github.com/shinnn)). Encoding / Mode options added.\n * 2013-09-18â€ƒâ€ƒâ€ƒv0.5.1â€ƒâ€ƒâ€ƒNew pattern matching for JSON object.\n * 2013-09-17â€ƒâ€ƒâ€ƒv0.5.0â€ƒâ€ƒâ€ƒRegular expression matching now supported and notation has been updated but is backward compatible.\n * 2013-05-03â€ƒâ€ƒâ€ƒv0.4.4â€ƒâ€ƒâ€ƒFix escape $ before performing regexp replace (thanks [@warpech](https://github.com/warpech)).\n * 2013-04-14â€ƒâ€ƒâ€ƒv0.4.3â€ƒâ€ƒâ€ƒDetect path destinations correctly on Windows.\n * 2013-04-02â€ƒâ€ƒâ€ƒv0.4.2â€ƒâ€ƒâ€ƒAdd peerDependencies and update description.\n * 2013-04-02â€ƒâ€ƒâ€ƒv0.4.1â€ƒâ€ƒâ€ƒAdd trace when force flag.\n * 2013-02-28â€ƒâ€ƒâ€ƒv0.4.0â€ƒâ€ƒâ€ƒFirst official release for Grunt 0.4.0.\n * 2012-11-20â€ƒâ€ƒâ€ƒv0.3.2â€ƒâ€ƒâ€ƒNew examples added.\n * 2012-09-25â€ƒâ€ƒâ€ƒv0.3.1â€ƒâ€ƒâ€ƒRename grunt-contrib-lib dep to grunt-lib-contrib, add force flag.\n * 2012-09-25â€ƒâ€ƒâ€ƒv0.3.0â€ƒâ€ƒâ€ƒGeneral cleanup and consolidation. Global options depreciated.\n\n---\n\nTask submitted by [Ariel Falduto](http://outa.im/)\n",
  "readmeFilename": "README.md",
  "_id": "grunt-replace@0.6.2",
  "_from": "grunt-replace@"
}
